sourceSets.main.java.srcDirs = ["src"]
sourceSets.test.java.srcDirs = ["test"]
sourceSets.test.resources.srcDirs = ["test/resources"]

import com.badlogic.gdx.jnigen.*

dependencies{
    testImplementation libraries.junit
    testCompile aproj(":natives:natives-desktop")
}

buildscript{
    dependencies{
        classpath "com.badlogicgames.gdx:gdx-jnigen:1.9.10"
    }
}


task deleteJniFolder(type: Delete) {
    delete "jni"
    delete "docs"
}

clean.dependsOn(deleteJniFolder)

task natives(dependsOn: [classes, deleteJniFolder]){
    doLast{

        def root = "$project.rootDir/arc-core"
        def jnidir = "$root/jni"
        def libdir = "$root/libs"

        new NativeCodeGenerator().generate("$root/src", "$root/build/classes/java/main", jnidir, null, null)

        copy{
            include "**"
            from "csrc/"
            into "jni/"
        }

        //download latest version of stb_image directly into jni folder
        "curl -o $jnidir/stb_image.h https://raw.githubusercontent.com/nothings/stb/master/stb_image.h".execute()

        BuildTarget[] targets = [
            BuildTarget.newDefaultTarget(BuildTarget.TargetOs.Windows, false),
            BuildTarget.newDefaultTarget(BuildTarget.TargetOs.Windows, true),
            BuildTarget.newDefaultTarget(BuildTarget.TargetOs.Linux, true),
            BuildTarget.newDefaultTarget(BuildTarget.TargetOs.Android, false),
            BuildTarget.newDefaultTarget(BuildTarget.TargetOs.MacOsX, true),
            BuildTarget.newDefaultTarget(BuildTarget.TargetOs.IOS, false)
        ] as BuildTarget[]

        targets*.cppExcludes = ["iosgl/**"] as String[]

        def matches = { String path, List<String> pattern ->
            return pattern.find{ path.contains(it) } != null
        }

        println(targets[0].cppExcludes)

        targets.find{ it.os == BuildTarget.TargetOs.IOS }.with{
            if(it != null){
                headerDirs = ["iosgl"] as String[]
                cppExcludes = []
            }
        }

        new AntScriptGenerator().generate(new BuildConfig("arc", "$root/build", "libs/", jnidir), targets)

        //overwrite incorrect application mkfile
        new File("$jnidir/Application.mk").text = "APP_ABI := all\nAPP_PLATFORM := android-16"

        for(BuildTarget target : targets){
            if((target.os == BuildTarget.TargetOs.IOS || target.os == BuildTarget.TargetOs.MacOsX) != System.getProperty("os.name").toLowerCase().contains("mac")) continue

            String buildFileName = "build-" + target.os.toString().toLowerCase() + (target.is64Bit ? "64" : "32") + ".xml"
            BuildExecutor.executeAnt("$jnidir/" + buildFileName, "-Dhas-compiler=true -Drelease=true clean postcompile")
        }

        new File(libdir).eachFileRecurse{ file ->
            if(!file.path.contains("ios") && !file.path.contains("mac")){
                "strip ${file.absolutePath}".execute()
            }
        }

        new File(libdir).eachFileRecurse{ target ->
            if(!target.isDirectory() && matches(target.path, ["windows", "mac", "linux"])){
                file("../natives/natives-desktop/libs/$target.name").bytes = target.bytes
            }
        }

        copy{
            include{ file -> matches(file.path, ["arm", "x86"]) }
            from "libs/"
            into "../natives/natives-android/libs/"
        }

        //cleanup
        delete{
            delete "libs"
        }

        //delete extra garbage, not sure why it even exists
        delete{
            delete "../libs"
        }
    }
}
