sourceSets.main.java.srcDirs = ["src"]
sourceSets.main.resources.srcDirs = ["natives"]

import com.badlogic.gdx.jnigen.*

buildscript{
    dependencies{
        classpath "com.badlogicgames.gdx:gdx-jnigen:1.9.10"
    }
}

task deleteJniFolder(type: Delete) {
    delete "jni"
    delete "docs"
}

clean.dependsOn(deleteJniFolder)

task natives(dependsOn: [classes, deleteJniFolder]){
    doLast{

        def root = "$project.rootDir/extensions/discord"
        def jnidir = "$root/jni"
        def libdir = "$root/libs"

        new NativeCodeGenerator().generate("$root/src", "$root/build/classes/java/main", jnidir, null, null)

        def platforms = ["linux", "osx", "win"]

        platforms.each{ platform ->
            def url = "https://github.com/discord/discord-rpc/releases/download/v3.4.0/discord-rpc-${platform}.zip"

            //download each platform
            "curl $url -L -o $jnidir/${platform}.zip".execute().waitFor()

            //unzip each platform
            "unzip $jnidir/${platform}.zip -d $jnidir".execute()
        }

        //this doesn't actually work, because reasons
        BuildTarget[] targets = [
            BuildTarget.newDefaultTarget(BuildTarget.TargetOs.Windows, true).tap{
                libraries += "-L$jnidir/discord-rpc/win64-static/lib -l:discord-rpc.lib"
            },
            BuildTarget.newDefaultTarget(BuildTarget.TargetOs.Linux, true).tap{
                libraries += "-L$jnidir/discord-rpc/linux-static/lib -l:libdiscord-rpc.a"
            },
            BuildTarget.newDefaultTarget(BuildTarget.TargetOs.MacOsX, true).tap{
                libraries += "$jnidir/discord-rpc/osx-dynamic/lib/libdiscord-rpc.dylib -Wl,-framework,AppKit"
                cppFlags = "-c -Wall -O2 -arch x86_64 -DFIXED_POINT -fmessage-length=0 -fPIC -mmacosx-version-min=10.7 -stdlib=libc++"
                linkerFlags = "-shared -arch x86_64 -mmacosx-version-min=10.7 -stdlib=libc++ -framework CoreServices -framework Carbon"
            },
        ] as BuildTarget[]

        targets*.cIncludes = [] as String[]

        new AntScriptGenerator().generate(new BuildConfig("arc-discord", "$root/build", "libs/", jnidir), targets)

        //set correct memcpy wrap contents...
        file("$jnidir/memcpy_wrap.c").text = file("$rootDir/natives/memcpy_wrap.c").text
        //wrap functions with right version of glibc
        file("$jnidir/build-linux64.xml").text = file("$jnidir/build-linux64.xml").text.replace("-Wl,-wrap,memcpy", "-Wl,-wrap,memcpy,-wrap,pow")

        for(BuildTarget target : targets){
            if((target.os == BuildTarget.TargetOs.MacOsX) != System.getProperty("os.name").toLowerCase().contains("mac")) continue

            String buildFileName = "build-" + target.os.toString().toLowerCase() + "64.xml"
            BuildExecutor.executeAnt("$jnidir/" + buildFileName, "-Dhas-compiler=true -Drelease=true clean postcompile")
        }

        new File(libdir).eachFileRecurse{ target ->
            if(!target.path.contains("mac")){
                "strip ${target.absolutePath}".execute().waitFor()
            }

            if(!target.isDirectory()){
                file("natives/$target.name").bytes = target.bytes
            }
        }

        //cleanup
        delete{ delete "obj" }
        delete{ delete "out" }
        delete{ delete "jni" }
        delete{ delete "libs" }

        //delete extra garbage, not sure why it even exists
        delete{
            delete "../libs"
        }

    }
}