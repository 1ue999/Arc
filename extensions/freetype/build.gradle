apply plugin: "com.badlogicgames.gdx.gdx-jnigen"

file("jni").mkdir()

jnigen{

    def fdir = "freetype-2.10.4"

    sharedLibName = "arc-freetype"
    temporaryDir = file("build/target/native").absolutePath
    libsDir = file("libs").absolutePath

    all{
        headerDirs += ["$fdir/include"]
        cIncludes = [
            //BASE
            "$fdir/src/base/ftsystem.c", "$fdir/src/base/ftinit.c", "$fdir/src/base/ftdebug.c",
            "$fdir/src/base/ftbase.c", "$fdir/src/base/ftbbox.c", "$fdir/src/base/ftglyph.c",
            "$fdir/src/base/ftbdf.c", "$fdir/src/base/ftbitmap.c", "$fdir/src/base/ftcid.c",
            "$fdir/src/base/ftfstype.c", "$fdir/src/base/ftgasp.c", "$fdir/src/base/ftgxval.c",
            "$fdir/src/base/ftmm.c", "$fdir/src/base/ftotval.c", "$fdir/src/base/ftpatent.c",
            "$fdir/src/base/ftpfr.c", "$fdir/src/base/ftstroke.c", "$fdir/src/base/ftsynth.c",
            "$fdir/src/base/fttype1.c", "$fdir/src/base/ftwinfnt.c", "$fdir/src/base/ftxf86.c",

            //DRIVERS
            "$fdir/src/bdf/bdf.c", "$fdir/src/cff/cff.c", "$fdir/src/cid/type1cid.c",
            "$fdir/src/pcf/pcf.c", "$fdir/src/pfr/pfr.c", "$fdir/src/sfnt/sfnt.c",
            "$fdir/src/truetype/truetype.c", "$fdir/src/type1/type1.c", "$fdir/src/type42/type42.c",
            "$fdir/src/winfonts/winfnt.c",

            //RASTERIZERS
            "$fdir/src/raster/raster.c", "$fdir/src/smooth/smooth.c",

            //AUX
            "$fdir/src/autofit/autofit.c", "$fdir/src/cache/ftcache.c", "$fdir/src/gzip/ftgzip.c",
            "$fdir/src/lzw/ftlzw.c", "$fdir/src/bzip2/ftbzip2.c", "$fdir/src/gxvalid/gxvalid.c",
            "$fdir/src/otvalid/otvalid.c", "$fdir/src/psaux/psaux.c", "$fdir/src/pshinter/pshinter.c",
            "$fdir/src/psnames/psnames.c"
        ]

        cFlags += " -DFT2_BUILD_LIBRARY"
        cppFlags += " -DFT2_BUILD_LIBRARY"
    }
    add(Windows, x32)
    add(Windows, x64)
    add(Linux, x64)
    add(Android)
    add(IOS)
}

task preJni{
    outputs.upToDateWhen{ false }

    copy{
        from "$rootDir/arc-core/build/classes/java/main"
        into "$rootDir/extensions/freetype/build/classes/java/main"
        include "**"
    }

    if(!file("$project.rootDir/extensions/freetype/jni/freetype-2.10.4").exists()){
        println "Fetching freetype source..."

        def root = "$project.rootDir/extensions/freetype"
        new File("$root/jni").mkdir()
        //| tar -xf -C $project.rootDir/extensions/freetype/jni
        def script = "wget -c https://download.savannah.gnu.org/releases/freetype/freetype-2.10.4.tar.gz -O $root/jni/freetype.tar.gz\n" +
                "tar -xf $root/jni/freetype.tar.gz -C $root/jni"
        def scriptFile = new File("$buildDir/getfreetype")
        scriptFile.parentFile.mkdirs()
        scriptFile.text = script
        "bash $scriptFile.absolutePath".execute().waitFor()
    }
}

//copies files into the right locations
task postJni{
    doLast{
        copy{
            from "libs/linux64", "libs/windows32", "libs/windows64", "libs/macosx64"
            into "../../natives/natives-freetype-desktop/libs"
            include "**"
        }

        ["arm64-v8a", "x86", "x86_64", "armeabi-v7a"].each{ p ->
            copy{
                from "libs/$p"
                into "../../natives/natives-freetype-android/libs/$p/"
                include "**"
            }
        }

        copy{
            from "libs/ios32/libarc.a"
            into "../../natives/natives-freetype-ios/libs/"
            include "**"
        }
    }
}

jnigenBuild.dependsOn preJni
jnigenBuild.finalizedBy postJni